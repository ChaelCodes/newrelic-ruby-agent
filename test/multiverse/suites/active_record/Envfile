def sqlite3_gem_and_version version=nil
  if RUBY_PLATFORM == "java"
    "gem 'activerecord-jdbcsqlite3-adapter'"
  else
    version ? "gem 'sqlite3', '#{version}'" : "gem 'sqlite3'"
  end
end

def minitest_version ar_version
  ar_version =~ /\~\>\s4\.0/ ? "~> 4.2" : "~> 5.2"
end

AR_VERSIONS = [
  ['~> 6.1.0', -> { RUBY_VERSION >= '2.5.0' }],
  ['~> 6.0.0', -> { RUBY_VERSION >= '2.5.0' }],
  ['~> 5.2.0', -> { RUBY_VERSION >= '2.2.2' }, '~> 1.3.6'],
  ['~> 5.1.6', -> { RUBY_VERSION >= '2.2.2' }, '~> 1.3.6'],
  ['~> 5.0.0', -> { RUBY_VERSION >= '2.2.2' }, '~> 1.3.6'],
  ['~> 4.2.0', -> { RUBY_VERSION  < '2.4.0' }, '~> 1.3.6'],
  ['~> 4.1.0', -> { RUBY_VERSION  < '2.4.0' }, '~> 1.3.6'],
  ['~> 4.0.13', -> { RUBY_VERSION  < '2.4.0' }, '~> 1.3.6'],
]

AR_VERSIONS.each do |ar_version, ruby_version, gem_version|
  if ruby_version.call
    gemfile <<-RB
      gem 'rack'
      gem 'minitest', '#{minitest_version(ar_version)}'
      gem 'activerecord', '#{ar_version}'
      #{sqlite3_gem_and_version(gem_version)}
    RB
  end
end

# AR 3.x does not have official support for Ruby 2.2, and there are several
# known issues, including https://github.com/rails/rails/issues/18991, so
# skip 3.x versions on 2.2.
#
if RUBY_VERSION < '2.2.0'
  gemfile <<-RB
    gem 'rack'
    gem 'activerecord', '~> 3.2.19'
    #{sqlite3_gem_and_version('~> 1.3.0')}
  RB

  gemfile <<-RB
    gem 'rack'
    gem 'activerecord', '~> 3.1.12'
    #{sqlite3_gem_and_version('~> 1.3.0')}
  RB

  gemfile <<-RB
    gem 'rack'
    gem 'activerecord', '~> 3.0.20'
    gem 'jdbc-sqlite3' if RUBY_PLATFORM != 'java'
    #{sqlite3_gem_and_version('~> 1.3.0')}
  RB
end
